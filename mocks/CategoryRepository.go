// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "winartodev/coba-mongodb/entity"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, slug
func (_m *CategoryRepository) Delete(ctx context.Context, slug string) error {
	ret := _m.Called(ctx, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *CategoryRepository) FindAll(ctx context.Context) ([]entity.Category, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Category
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, slug
func (_m *CategoryRepository) FindOne(ctx context.Context, slug string) (*entity.Category, error) {
	ret := _m.Called(ctx, slug)

	var r0 *entity.Category
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Category); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, category
func (_m *CategoryRepository) Insert(ctx context.Context, category entity.Category) error {
	ret := _m.Called(ctx, category)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Category) error); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, slug, category
func (_m *CategoryRepository) Update(ctx context.Context, slug string, category entity.Category) error {
	ret := _m.Called(ctx, slug, category)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Category) error); ok {
		r0 = rf(ctx, slug, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryRepository(t testing.TB) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
